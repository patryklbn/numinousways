name: Flutter CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  analyze-and-test:
    name: Analyze and Test
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        
      # Step 2: Create environment files
      - name: Create .env file
        run: echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
        
      # Step 3: Create google-services.json
      - name: Create google-services.json
        run: echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > android/app/google-services.json
        
      # Step 4: Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          
      # Step 5: Install dependencies
      - name: Install dependencies
        run: flutter pub get
        
      # Step 6: Verify formatting
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .
        continue-on-error: true  # Don't fail workflow if formatting issues found
        
      # Step 7: Analyze Dart code
      - name: Analyze Dart code
        run: flutter analyze | tee analyze_report.txt
        continue-on-error: true  # Don't fail workflow if analyze issues found
      
      # Step 8: Run unit tests with coverage
      - name: Run unit tests
        run: flutter test --coverage
      
      # Step 9: Run integration tests
      - name: Run integration tests
        run: flutter test integration_test
        continue-on-error: true  # Integration tests might need emulators/simulators
      
      # Step 10: Upload test coverage
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false
      
      # Step 11: Upload analyze report
      - name: Upload analyze reports
        uses: actions/upload-artifact@v4
        with:
          name: analyze-report
          path: analyze_report.txt

  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: analyze-and-test  # This ensures tests must pass before building
    if: ${{ github.event_name == 'push' }}  # Only build on pushes, not pull requests
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        
      # Step 2: Create environment files
      - name: Create .env file
        run: echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
        
      # Step 3: Create google-services.json
      - name: Create google-services.json
        run: echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > android/app/google-services.json
        
      # Step 4: Create local.properties with Maps API key
      - name: Create local.properties with API keys
        run: |
          echo "sdk.dir=$ANDROID_HOME" > android/local.properties
          echo "flutter.sdk=$FLUTTER_HOME" >> android/local.properties
          echo "MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}" >> android/local.properties
          
      # Step 5: Set up Java 17
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      # Step 6: Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          
      # Step 7: Install dependencies
      - name: Install dependencies
        run: flutter pub get
        
      # Step 8: Decode keystore from GitHub Secrets
      - name: Decode keystore
        run: echo "$KEYSTORE_BASE64" | base64 --decode > android/keystore.jks
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          
      # Step 9: Create key.properties file
      - name: Create key.properties
        run: |
          echo "storeFile=../keystore.jks" > android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          
      # Step 10: Build APK
      - name: Build APK
        run: flutter build apk --release
        
      # Step 11: Upload Android artifact
      - name: Upload Android artifact
        uses: actions/upload-artifact@v4
        with:
          name: flutter-release-apk
          path: build/app/outputs/flutter-apk/app-release.apk
          
  build-ios:
    name: Build iOS IPA
    runs-on: macos-latest
    needs: analyze-and-test  # This ensures tests must pass before building
    if: ${{ github.event_name == 'push' }}  # Only build on pushes, not pull requests
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        
      # Step 2: Create environment files
      - name: Create .env file
        run: echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
        
      # Step 3: Create GoogleService-Info.plist
      - name: Create GoogleService-Info.plist
        run: echo '${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}' > ios/Runner/GoogleService-Info.plist
        
      # Step 4: Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          
      # Step 5: Install dependencies
      - name: Install dependencies
        run: flutter pub get
        
      # Step 6: Set up CocoaPods
      - name: Set up CocoaPods
        run: |
          sudo gem install cocoapods
          cd ios
          pod install
          cd ..
          
      # Step 7: Build iOS IPA
      - name: Build iOS IPA
        run: flutter build ipa --release --no-codesign
        
      # Step 8: Upload iOS artifact
      - name: Upload iOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: flutter-release-ipa
          path: build/ios/ipa
