name: Flutter CI/CD
on:
 push:
   branches:
     - main
 pull_request:
   branches:
     - main

jobs:
 analyze-and-test:
   name: Analyze and Test
   runs-on: ubuntu-latest
   steps:
     # Step 1
     - name: Checkout repository
       uses: actions/checkout@v3
       
     # Step 2
     - name: Create .env file
       run: echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
       
     # Step 3
     - name: Create google-services.json
       run: echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > android/app/google-services.json
       
     # Step 4
     - name: Set up Flutter
       uses: subosito/flutter-action@v2
       with:
         channel: stable
         
     # Step 5
     - name: Install dependencies
       run: flutter pub get
       
     # Step 6
     - name: Analyze Dart code
       run: flutter analyze
       continue-on-error: true
     
     # Step 7
     - name: Run unit tests (excluding login provider tests)
       run: |
         flutter test --coverage \
         --exclude-tags=login-provider-tests \
         --exclude "test/unit/services/login_provider_test.dart"
       
     # Step 8
     - name: Run integration tests
       run: flutter test integration_test || true
     
     # Step 9
     - name: Upload coverage reports
       uses: codecov/codecov-action@v3
       with:
         file: ./coverage/lcov.info
         fail_ci_if_error: false

 build-android:
   name: Build Android APK
   runs-on: ubuntu-latest
   needs: analyze-and-test
   if: ${{ always() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
   steps:
     # Step 1
     - name: Checkout repository
       uses: actions/checkout@v3
       
     # Step 2
     - name: Create .env file
       run: echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
       
     # Step 3
     - name: Create google-services.json
       run: echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > android/app/google-services.json
       
     # Step 4
     - name: Create local.properties with API keys
       run: |
         echo "sdk.dir=$ANDROID_HOME" > android/local.properties
         echo "flutter.sdk=$FLUTTER_HOME" >> android/local.properties
         echo "MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}" >> android/local.properties
         
     # Step 5
     - name: Set up Java 17
       uses: actions/setup-java@v3
       with:
         java-version: '17'
         distribution: 'temurin'
         
     # Step 6
     - name: Set up Flutter
       uses: subosito/flutter-action@v2
       with:
         channel: stable
         
     # Step 7
     - name: Install dependencies
       run: flutter pub get
       
     # Step 8
     - name: Decode keystore
       run: echo "$KEYSTORE_BASE64" | base64 --decode > android/keystore.jks
       env:
         KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
         
     # Step 9
     - name: Create key.properties file
       run: |
         echo "storeFile=../keystore.jks" > android/key.properties
         echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
         echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
         echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
         
     # Step 10
     - name: Build APK
       run: flutter build apk --release
       
     # Step 11
     - name: Upload Android artifact
       uses: actions/upload-artifact@v4
       with:
         name: flutter-release-apk
         path: build/app/outputs/flutter-apk/app-release.apk
         
 build-ios:
   name: Build iOS IPA
   runs-on: macos-latest
   needs: analyze-and-test
   if: ${{ always() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
   steps:
     # Step 1
     - name: Checkout repository
       uses: actions/checkout@v3
       
     # Step 2
     - name: Create .env file
       run: echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
       
     # Step 3
     - name: Create GoogleService-Info.plist
       run: echo '${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}' > ios/Runner/GoogleService-Info.plist
       
     # Step 4
     - name: Set up Flutter
       uses: subosito/flutter-action@v2
       with:
         channel: stable
         
     # Step 5
     - name: Install dependencies
       run: flutter pub get
       
     # Step 6
     - name: Set up CocoaPods
       run: |
         sudo gem install cocoapods
         cd ios
         pod install
         cd ..
         
     # Step 7
     - name: Build iOS IPA
       run: flutter build ipa --release --no-codesign
       
     # Step 8
     - name: Upload iOS artifact
       uses: actions/upload-artifact@v4
       with:
         name: flutter-release-ipa
         path: build/ios/ipa
