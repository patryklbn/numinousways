plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

// 1) Load the keystore properties
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("key.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

// Load local.properties for API keys
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

// Get Maps API key from local.properties
def mapsApiKey = localProperties.getProperty('MAPS_API_KEY')
if (mapsApiKey == null) {
    mapsApiKey = ''
    println 'WARNING: No MAPS_API_KEY defined in local.properties'
}

android {
    namespace = "com.patrykgronczewski.numinousway"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    // Add splits configuration to handle different architectures
    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true
        }
    }

    defaultConfig {
        applicationId = "com.patrykgronczewski.numinousway"
        minSdk = 23
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName

        multiDexEnabled true

        // Set both Maps API key and applicationName placeholders
        manifestPlaceholders = [
                MAPS_API_KEY: mapsApiKey,
                applicationName: "io.flutter.app.FlutterApplication"
        ]

        // ABI filters removed as recommended
    }

    // 2) Define signing configs for release
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
        // debug is auto-generated by Gradle, you can leave it out unless you need custom debug config
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            // Keep using the default debug keystore
            signingConfig signingConfigs.debug
        }

        release {
            // 3) Enable the release signing config
            signingConfig signingConfigs.release

            minifyEnabled false
            shrinkResources false
        }
    }

    // Add aaptOptions to handle potential resource conflicts
    aaptOptions {
        noCompress 'tflite'
        noCompress 'lite'
    }
}

flutter {
    source = "../.."
}

// Apply Google Services plugin (if using Firebase)
apply plugin: 'com.google.gms.google-services'